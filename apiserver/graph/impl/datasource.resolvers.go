package impl

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/kubeagi/arcadia/apiserver/graph/generated"
	"github.com/kubeagi/arcadia/apiserver/pkg/auth"
	"github.com/kubeagi/arcadia/apiserver/pkg/client"
	"github.com/kubeagi/arcadia/apiserver/pkg/datasource"
)

// CreateDatasource is the resolver for the createDatasource field.
func (r *datasourceMutationResolver) CreateDatasource(ctx context.Context, obj *generated.DatasourceMutation, input generated.CreateDatasourceInput) (*generated.Datasource, error) {
	c, err := getClientFromCtx(ctx)
	if err != nil {
		return nil, err
	}

	return datasource.CreateDatasource(ctx, c, input)
}

// UpdateDatasource is the resolver for the updateDatasource field.
func (r *datasourceMutationResolver) UpdateDatasource(ctx context.Context, obj *generated.DatasourceMutation, input *generated.UpdateDatasourceInput) (*generated.Datasource, error) {
	c, err := getClientFromCtx(ctx)
	if err != nil {
		return nil, err
	}
	return datasource.UpdateDatasource(ctx, c, input)
}

// DeleteDatasource is the resolver for the deleteDatasource field.
func (r *datasourceMutationResolver) DeleteDatasources(ctx context.Context, obj *generated.DatasourceMutation, input *generated.DeleteCommonInput) (*string, error) {
	c, err := getClientFromCtx(ctx)
	if err != nil {
		return nil, err
	}
	return datasource.DeleteDatasources(ctx, c, input)
}

// GetDatasource is the resolver for the getDatasource field.
func (r *datasourceQueryResolver) GetDatasource(ctx context.Context, obj *generated.DatasourceQuery, name string, namespace string) (*generated.Datasource, error) {
	c, err := getClientFromCtx(ctx)
	if err != nil {
		return nil, err
	}
	return datasource.ReadDatasource(ctx, c, name, namespace)
}

// CheckDatasource is the resolver for the checkDatasource field.
func (r *datasourceQueryResolver) CheckDatasource(ctx context.Context, obj *generated.DatasourceQuery, input generated.CreateDatasourceInput) (*generated.Datasource, error) {
	c, err := getClientFromCtx(ctx)
	if err != nil {
		return nil, err
	}
	return datasource.CheckDatasource(ctx, c, input)
}

// ListDatasources is the resolver for the listDatasources field.
func (r *datasourceQueryResolver) ListDatasources(ctx context.Context, obj *generated.DatasourceQuery, input generated.ListCommonInput) (*generated.PaginatedResult, error) {
	token := auth.ForOIDCToken(ctx)
	c, err := client.GetClient(token)
	if err != nil {
		return nil, err
	}
	return datasource.ListDatasources(ctx, c, input)
}

// Datasource is the resolver for the Datasource field.
func (r *mutationResolver) Datasource(ctx context.Context) (*generated.DatasourceMutation, error) {
	return &generated.DatasourceMutation{}, nil
}

// Datasource is the resolver for the Datasource field.
func (r *queryResolver) Datasource(ctx context.Context) (*generated.DatasourceQuery, error) {
	return &generated.DatasourceQuery{}, nil
}

// DatasourceMutation returns generated.DatasourceMutationResolver implementation.
func (r *Resolver) DatasourceMutation() generated.DatasourceMutationResolver {
	return &datasourceMutationResolver{r}
}

// DatasourceQuery returns generated.DatasourceQueryResolver implementation.
func (r *Resolver) DatasourceQuery() generated.DatasourceQueryResolver {
	return &datasourceQueryResolver{r}
}

type datasourceMutationResolver struct{ *Resolver }
type datasourceQueryResolver struct{ *Resolver }
