package impl

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/kubeagi/arcadia/apiserver/graph/generated"
	"github.com/kubeagi/arcadia/apiserver/pkg/application"
)

// CreateKnowledgeBaseApplication is the resolver for the createKnowledgeBaseApplication field.
func (r *knowledgeBaseApplicationMutationResolver) CreateKnowledgeBaseApplication(ctx context.Context, obj *generated.KnowledgeBaseApplicationMutation, input generated.CreateKnowledgeBaseApplicationInput) (*generated.KnowledgeBaseApplication, error) {
	c, err := getClientFromCtx(ctx)
	if err != nil {
		return nil, err
	}
	return application.CreateKnowledgeBaseApplication(ctx, c, input)
}

// UpdateKnowledgeBaseApplication is the resolver for the updateKnowledgeBaseApplication field.
func (r *knowledgeBaseApplicationMutationResolver) UpdateKnowledgeBaseApplication(ctx context.Context, obj *generated.KnowledgeBaseApplicationMutation, input generated.UpdateKnowledgeBaseApplicationInput) (*generated.KnowledgeBaseApplication, error) {
	c, err := getClientFromCtx(ctx)
	if err != nil {
		return nil, err
	}
	return application.UpdateKnowledgeBaseApplication(ctx, c, input)
}

// DeleteKnowledgeBaseApplication is the resolver for the deleteKnowledgeBaseApplication field.
func (r *knowledgeBaseApplicationMutationResolver) DeleteKnowledgeBaseApplication(ctx context.Context, obj *generated.KnowledgeBaseApplicationMutation, input generated.DeleteCommonInput) (*string, error) {
	c, err := getClientFromCtx(ctx)
	if err != nil {
		return nil, err
	}
	return application.DeleteKnowledgeBaseApplication(ctx, c, input)
}

// GetKnowledgeBaseApplication is the resolver for the getKnowledgeBaseApplication field.
func (r *knowledgeBaseApplicationQueryResolver) GetKnowledgeBaseApplication(ctx context.Context, obj *generated.KnowledgeBaseApplicationQuery, name string, namespace string) (*generated.KnowledgeBaseApplication, error) {
	c, err := getClientFromCtx(ctx)
	if err != nil {
		return nil, err
	}
	return application.GetKnowledgeBaseApplication(ctx, c, name, namespace)
}

// ListKnowledgeBaseApplications is the resolver for the listKnowledgeBaseApplications field.
func (r *knowledgeBaseApplicationQueryResolver) ListKnowledgeBaseApplications(ctx context.Context, obj *generated.KnowledgeBaseApplicationQuery, input generated.ListCommonInput) (*generated.PaginatedResult, error) {
	c, err := getClientFromCtx(ctx)
	if err != nil {
		return nil, err
	}
	return application.ListKnowledgeBaseApplications(ctx, c, input)
}

// KnowledgeBaseApplication is the resolver for the KnowledgeBaseApplication field.
func (r *mutationResolver) KnowledgeBaseApplication(ctx context.Context) (*generated.KnowledgeBaseApplicationMutation, error) {
	return &generated.KnowledgeBaseApplicationMutation{}, nil
}

// KnowledgeBaseApplication is the resolver for the KnowledgeBaseApplication field.
func (r *queryResolver) KnowledgeBaseApplication(ctx context.Context) (*generated.KnowledgeBaseApplicationQuery, error) {
	return &generated.KnowledgeBaseApplicationQuery{}, nil
}

// KnowledgeBaseApplicationMutation returns generated.KnowledgeBaseApplicationMutationResolver implementation.
func (r *Resolver) KnowledgeBaseApplicationMutation() generated.KnowledgeBaseApplicationMutationResolver {
	return &knowledgeBaseApplicationMutationResolver{r}
}

// KnowledgeBaseApplicationQuery returns generated.KnowledgeBaseApplicationQueryResolver implementation.
func (r *Resolver) KnowledgeBaseApplicationQuery() generated.KnowledgeBaseApplicationQueryResolver {
	return &knowledgeBaseApplicationQueryResolver{r}
}

type knowledgeBaseApplicationMutationResolver struct{ *Resolver }
type knowledgeBaseApplicationQueryResolver struct{ *Resolver }
