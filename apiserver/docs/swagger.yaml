basePath: /
definitions:
  chat.APPMetadata:
    properties:
      app_name:
        description: AppName, the name of the application
        example: chat-with-llm
        type: string
      app_namespace:
        description: AppNamespace, the namespace of the application
        example: kubeagi-system
        type: string
    required:
    - app_name
    - app_namespace
    type: object
  chat.ChatReqBody:
    properties:
      app_name:
        description: AppName, the name of the application
        example: chat-with-llm
        type: string
      app_namespace:
        description: AppNamespace, the namespace of the application
        example: kubeagi-system
        type: string
      conversation_id:
        description: ConversationID, if it is empty, a new conversation will be created
        example: 5a41f3ca-763b-41ec-91c3-4bbbb00736d0
        type: string
      files:
        description: Files this conversation will use in the context
        example:
        - test.pdf
        - song.mp3
        items:
          type: string
        type: array
      query:
        description: Query user query string
        example: 旷工最小计算单位为多少天？
        type: string
      response_mode:
        allOf:
        - $ref: '#/definitions/chat.ResponseMode'
        description: |-
          ResponseMode:
          * Blocking - means the response is returned in a blocking manner
          * Streaming - means the response will use Server-Sent Events
        example: blocking
    required:
    - app_name
    - app_namespace
    - query
    - response_mode
    type: object
  chat.ChatRespBody:
    properties:
      action:
        description: Action indicates what is this chat for
        example: CHAT
        type: string
      conversation_id:
        example: 5a41f3ca-763b-41ec-91c3-4bbbb00736d0
        type: string
      created_at:
        description: CreatedAt is the time when the message is created
        example: "2023-12-21T10:21:06.389359092+08:00"
        type: string
      document:
        allOf:
        - $ref: '#/definitions/chat.DocumentRespBody'
        description: Documents in this chat
      latency:
        description: Latency(ms) is how much time the server cost to process a certain
          request.
        example: 1000
        type: integer
      message:
        description: Message is what AI say
        example: 旷工最小计算单位为0.5天。
        type: string
      message_id:
        example: 4f3546dd-5404-4bf8-a3bc-4fa3f9a7ba24
        type: string
      references:
        description: References is the list of references
        items:
          $ref: '#/definitions/retriever.Reference'
        type: array
    type: object
  chat.ConversationReqBody:
    properties:
      app_name:
        description: AppName, the name of the application
        example: chat-with-llm
        type: string
      app_namespace:
        description: AppNamespace, the namespace of the application
        example: kubeagi-system
        type: string
      conversation_id:
        description: ConversationID, if it is empty, a new conversation will be created
        example: 5a41f3ca-763b-41ec-91c3-4bbbb00736d0
        type: string
    required:
    - app_name
    - app_namespace
    type: object
  chat.DocumentRespBody:
    properties:
      id:
        example: 8b833028-5d8d-418c-9f28-8aaa23c972b0
        type: string
      name:
        example: example.pdf
        type: string
      object:
        example: application/base-chat-document-assistant/conversation/f54f5122-28fb-474e-8593-39f5b3760eaa/90fe100fb9ee6e6cb9ccb091fd91b6264f5f5444dea6d93b3c8ed7418e20c37d.pdf
        type: string
    type: object
  chat.ErrorResp:
    properties:
      error:
        example: conversation is not found
        type: string
    type: object
  chat.MessageReqBody:
    properties:
      app_name:
        description: AppName, the name of the application
        example: chat-with-llm
        type: string
      app_namespace:
        description: AppNamespace, the namespace of the application
        example: kubeagi-system
        type: string
      conversation_id:
        description: ConversationID, if it is empty, a new conversation will be created
        example: 5a41f3ca-763b-41ec-91c3-4bbbb00736d0
        type: string
      message_id:
        description: MessageID, single message id
        example: 4f3546dd-5404-4bf8-a3bc-4fa3f9a7ba24
        type: string
    required:
    - app_name
    - app_namespace
    type: object
  chat.ResponseMode:
    enum:
    - blocking
    - streaming
    type: string
    x-enum-varnames:
    - Blocking
    - Streaming
  chat.SimpleResp:
    properties:
      message:
        example: ok
        type: string
    type: object
  common.ReadCSVResult:
    properties:
      rows:
        items:
          items:
            type: string
          type: array
        type: array
      total:
        type: integer
    type: object
  rag.RadarData:
    properties:
      color:
        type: string
      type:
        type: string
      value:
        type: number
    type: object
  rag.Report:
    properties:
      radarChart:
        items:
          $ref: '#/definitions/rag.RadarData'
        type: array
      summary:
        description: TODO
        type: string
      totalScore:
        $ref: '#/definitions/rag.TotalScoreData'
    type: object
  rag.ReportDetail:
    properties:
      data:
        items:
          $ref: '#/definitions/rag.ReportLine'
        type: array
      total:
        type: integer
    type: object
  rag.ReportLine:
    properties:
      answer:
        type: string
      contexts:
        items:
          type: string
        type: array
      costTime:
        type: number
      data:
        additionalProperties:
          type: number
        type: object
      groundTruths:
        items:
          type: string
        type: array
      question:
        type: string
      totalScore:
        type: number
    type: object
  rag.TotalScoreData:
    properties:
      color:
        type: string
      score:
        type: number
    type: object
  retriever.Reference:
    properties:
      answer:
        description: Answer row
        example: 旷工最小计算单位为 0.5 天。
        type: string
      content:
        description: related content in the source file or in webpage
        example: 旷工最小计算单位为0.5天，不足0.5天以0.5天计算，超过0.5天不满1天以1天计算，以此类推。
        type: string
      file_name:
        description: source file name, only file name, not full path
        example: 员工考勤管理制度-2023.pdf
        type: string
      page_number:
        description: page number in the source file
        example: 1
        type: integer
      qa_file_path:
        description: the qa file fullpath
        example: dataset/dataset-playground/v1/qa.csv
        type: string
      qa_line_number:
        description: line number in the qa file
        example: 7
        type: integer
      question:
        description: Question row
        example: 'q: 旷工最小计算单位为多少天？'
        type: string
      score:
        description: vector search score
        example: 0.34
        type: number
      title:
        description: Title of the webpage
        example: 开始使用 Microsoft 帐户 – Microsoft
        type: string
      url:
        description: URL of the webpage
        example: https://www.microsoft.com/zh-cn/welcome
        type: string
    type: object
  service.Chunk:
    properties:
      etag:
        type: string
      partNubmer:
        type: integer
      size:
        type: integer
    type: object
  service.CompleteBody:
    properties:
      bucket:
        type: string
      bucketPath:
        type: string
      fileName:
        type: string
      md5:
        type: string
      uploadID:
        type: string
    type: object
  service.DelteFileBody:
    properties:
      bucket:
        type: string
      bucketPath:
        type: string
      files:
        items:
          type: string
        type: array
    type: object
  service.GenChunkURLBody:
    properties:
      bucket:
        type: string
      bucketPath:
        type: string
      fileName:
        type: string
      md5:
        type: string
      partNumber:
        type: integer
      size:
        type: integer
      uploadID:
        type: string
    type: object
  service.GenChunkURLResult:
    properties:
      completed:
        type: boolean
      url:
        type: string
    type: object
  service.NewMultipartBody:
    properties:
      bucket:
        description: The file is eventually stored in bucketPath/filtName in the bucket.
        type: string
      bucketPath:
        type: string
      chunkCount:
        description: How many pieces do we have to divide it into?
        type: integer
      fileName:
        type: string
      md5:
        description: file md5
        type: string
      size:
        description: part size
        type: integer
    type: object
  service.SuccessChunksResult:
    properties:
      chunks:
        items:
          $ref: '#/definitions/service.Chunk'
        type: array
      done:
        type: boolean
      uploadID:
        type: string
    type: object
  service.WebCrawlerFileBody:
    properties:
      datasource:
        type: string
      params:
        description: Params to generate a web crawler file
        properties:
          exclude_img_info:
            properties:
              height:
                type: integer
              weight:
                type: integer
            type: object
          exclude_sub_urls:
            items:
              type: string
            type: array
          include_sub_urls:
            items:
              type: string
            type: array
          interval_time:
            description: Params
            type: integer
          max_count:
            type: integer
          max_depth:
            type: integer
          resource_types:
            items:
              type: string
            type: array
          url:
            type: string
        type: object
      versioneddataset:
        type: string
    required:
    - datasource
    - versioneddataset
    type: object
  storage.Conversation:
    properties:
      app_name:
        example: chat-with-llm
        type: string
      app_namespace:
        example: arcadia
        type: string
      id:
        example: 5a41f3ca-763b-41ec-91c3-4bbbb00736d0
        type: string
      messages:
        items:
          $ref: '#/definitions/storage.Message'
        type: array
      started_at:
        example: "2023-12-21T10:21:06.389359092+08:00"
        type: string
      updated_at:
        example: "2023-12-22T10:21:06.389359092+08:00"
        type: string
    type: object
  storage.Document:
    properties:
      id:
        example: 4f3546dd-5404-4bf8-a3bc-4fa3f9a7ba24
        type: string
      name:
        example: kaoqin.pdf
        type: string
      object:
        example: kaoqin.pdf
        type: string
      summary:
        example: kaoqin.pdf
        type: string
    type: object
  storage.Message:
    properties:
      action:
        description: |-
          Action indicates what is this message for
          Chat(by default),UPLOAD,etc...
        example: UPLOAD
        type: string
      answer:
        example: 旷工最小计算单位为0.5天。
        type: string
      documents:
        description: Docs uploaded in this message
        items:
          $ref: '#/definitions/storage.Document'
        type: array
      id:
        example: 4f3546dd-5404-4bf8-a3bc-4fa3f9a7ba24
        type: string
      latency:
        example: 1000
        type: integer
      query:
        example: 旷工最小计算单位为多少天？
        type: string
      references:
        items:
          $ref: '#/definitions/retriever.Reference'
        type: array
    type: object
host: localhost:8081
info:
  contact: {}
  description: This is a apiserver for KubeAGI.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: ApiServer Swagger API
  version: "1.0"
paths:
  /bff/model/files:
    delete:
      consumes:
      - application/json
      description: Delete files
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.DelteFileBody'
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete files
      tags:
      - MinioAPI
  /bff/model/files/chunk_url:
    post:
      consumes:
      - application/json
      description: Get multipart upload URL
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.GenChunkURLBody'
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.GenChunkURLResult'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get multipart upload URL
      tags:
      - MinioAPI
  /bff/model/files/chunks:
    get:
      consumes:
      - application/json
      description: Get success chunks of a file
      parameters:
      - description: MD5 value of the file
        in: query
        name: md5
        required: true
        type: string
      - description: Name of the file
        in: query
        name: fileName
        required: true
        type: string
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      - description: Path of the bucket
        in: query
        name: bucketPath
        required: true
        type: string
      - description: ETag of the file
        in: query
        name: etag
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.SuccessChunksResult'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get success chunks of a file
      tags:
      - MinioAPI
    post:
      consumes:
      - application/json
      description: create new multipart upload
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.NewMultipartBody'
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: create new multipart upload
      tags:
      - MinioAPI
    put:
      consumes:
      - application/json
      description: Complete multipart upload
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.CompleteBody'
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Complete multipart upload
      tags:
      - MinioAPI
  /bff/model/files/chunks/abort:
    put:
      consumes:
      - application/json
      description: Abort a file upload
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.CompleteBody'
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Abort a file upload
      tags:
      - MinioAPI
  /bff/model/files/download:
    get:
      consumes:
      - application/json
      description: Download files in chunks
      parameters:
      - description: The start of the file
        in: query
        name: from
        required: true
        type: integer
      - description: The end of the file
        in: query
        name: end
        required: true
        type: integer
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      - description: Path of the bucket
        in: query
        name: bucketPath
        required: true
        type: string
      - description: Name of the file
        in: query
        name: fileName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Download files in chunks
      tags:
      - MinioAPI
  /bff/model/files/downloadlink:
    get:
      consumes:
      - application/json
      description: Get a download link
      parameters:
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      - description: Path of the bucket
        in: query
        name: bucketPath
        required: true
        type: string
      - description: Name of the file
        in: query
        name: fileName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a download link
      tags:
      - MinioAPI
  /bff/model/files/stat:
    get:
      consumes:
      - application/json
      description: Statistics file information
      parameters:
      - description: Name of the file
        in: query
        name: fileName
        required: true
        type: string
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      - description: Path of the bucket
        in: query
        name: bucketPath
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Statistics file information
      tags:
      - MinioAPI
  /bff/versioneddataset/files/csv:
    get:
      consumes:
      - application/json
      description: Read a file line by line
      parameters:
      - description: Start page
        in: query
        name: page
        required: true
        type: integer
      - description: The number of rows read each time
        in: query
        name: size
        required: true
        type: integer
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      - description: Path of the bucket
        in: query
        name: bucketPath
        required: true
        type: string
      - description: Name of the file
        in: query
        name: fileName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ReadCSVResult'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Read a file line by line
      tags:
      - MinioAPI
  /bff/versioneddataset/files/webcrawler:
    post:
      consumes:
      - application/json
      description: Create a web crawler file which contains crawer params
      parameters:
      - description: request params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.WebCrawlerFileBody'
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create web cralwer file
      tags:
      - MinioAPI
  /chat:
    post:
      consumes:
      - application/json
      description: chat with application
      parameters:
      - description: Should the chat request be treated as debugging?
        in: query
        name: debug
        type: boolean
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chat.ChatReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: blocking mode, will return all field; streaming mode, only
            conversation_id, message and created_at will be returned
          schema:
            $ref: '#/definitions/chat.ChatRespBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/chat.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/chat.ErrorResp'
      summary: chat with application
      tags:
      - application
  /chat/conversations:
    post:
      consumes:
      - application/json
      description: list all conversations
      parameters:
      - description: query params, if not set will return all current user's conversations
        in: body
        name: request
        schema:
          $ref: '#/definitions/chat.APPMetadata'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/storage.Conversation'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/chat.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/chat.ErrorResp'
      summary: list all conversations
      tags:
      - application
  /chat/conversations/:conversationID:
    delete:
      consumes:
      - application/json
      description: delete one conversation
      parameters:
      - description: conversationID
        in: path
        name: conversationID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chat.SimpleResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/chat.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/chat.ErrorResp'
      summary: delete one conversation
      tags:
      - application
  /chat/conversations/file:
    post:
      consumes:
      - multipart/form-data
      description: receive conversational files for one conversation
      parameters:
      - description: The app namespace for this conversation
        in: formData
        name: app_namespace
        required: true
        type: string
      - description: The app name for this conversation
        in: formData
        name: app_name
        required: true
        type: string
      - description: The conversation id for this file
        in: formData
        name: conversation_id
        type: string
      - description: This is the file for the conversation
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chat.ChatRespBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/chat.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/chat.ErrorResp'
      summary: receive conversational files for one conversation
      tags:
      - application
  /chat/messages:
    post:
      consumes:
      - application/json
      description: get all messages history for one conversation
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chat.ConversationReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Conversation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/chat.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/chat.ErrorResp'
      summary: get all messages history for one conversation
      tags:
      - application
  /chat/messages/:messageID/references:
    post:
      consumes:
      - application/json
      description: get one message's references
      parameters:
      - description: messageID
        in: path
        name: messageID
        required: true
        type: string
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chat.MessageReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/retriever.Reference'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/chat.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/chat.ErrorResp'
      summary: get one message references
      tags:
      - application
  /chat/prompt-starter:
    post:
      consumes:
      - application/json
      description: get app's prompt starters
      parameters:
      - description: how many prompts you need should > 0 and < 10
        in: query
        name: limit
        type: integer
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chat.APPMetadata'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/chat.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/chat.ErrorResp'
      summary: get app's prompt starters
      tags:
      - application
  /rags/detail:
    get:
      consumes:
      - application/json
      description: Get detail data of a rag
      parameters:
      - description: rag name
        in: query
        name: ragName
        required: true
        type: string
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      - description: default is 1
        in: query
        name: page
        type: integer
      - description: default is 10
        in: query
        name: size
        type: string
      - description: rag metrcis
        in: query
        name: sortBy
        type: string
      - description: desc or asc
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rag.ReportDetail'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get detail data of a rag
      tags:
      - RAG
  /rags/report:
    get:
      consumes:
      - application/json
      description: Get a summary of rag
      parameters:
      - description: rag name
        in: query
        name: ragName
        required: true
        type: string
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rag.Report'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a summary of rag
      tags:
      - RAG
  /rags/scatter:
    get:
      consumes:
      - application/json
      description: Get scatter data of a rag
      parameters:
      - description: rag name
        in: query
        name: ragName
        required: true
        type: string
      - description: Name of the bucket
        in: header
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rag.ReportDetail'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get scatter data of a rag
      tags:
      - RAG
securityDefinitions:
  ApiKeyAuth:
    description: API token for authorization
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
