type Embedder {
    name: String!
    namespace: String!
    labels: Map
    annotations: Map
    creator: String
    displayName: String
    description: String
    endpoint: Endpoint
    serviceType: String
    updateTimestamp: Time
}

input CreateEmbedderInput {
    """模型服务资源名称（不可同名）"""
    name: String!
    """模型服务创建命名空间"""
    namespace: String!
    """模型服务资源标签"""
    labels: Map
    """模型服务资源注释"""
    annotations: Map
    """模型服务资源展示名称作为显示，并提供编辑"""
    displayName: String
    """模型服务资源描述"""
    description: String
    endpointinput: EndpointInput
    """模型服务类型"""
    serviceType: String
}

input UpdateEmbedderInput {
    """模型服务资源名称（不可同名）"""
    name: String!
    """模型服务创建命名空间"""
    namespace: String!
    """模型服务资源标签"""
    labels: Map
    """模型服务资源注释"""
    annotations: Map
    """模型服务资源展示名称作为显示，并提供编辑"""
    displayName: String
    """模型服务资源描述"""
    description: String
}

input DeleteEmbedderInput {
    name: String
    namespace: String!
    """标签选择器"""
    labelSelector: String
    """字段选择器"""
    fieldSelector: String
}

input ListEmbedderInput {
    name: String
    namespace: String!
    displayName: String
    """标签选择器"""
    labelSelector: String
    """字段选择器"""
    fieldSelector: String
    page: Int
    pageSize: Int
    keyword: String
}

type EmbedderQuery {
    getEmbedder(name: String!, namespace: String!): Embedder!
    listEmbedders(input: ListEmbedderInput!): PaginatedResult!
}

type EmbedderMutation {
    createEmbedder(input: CreateEmbedderInput!): Embedder!
    updateEmbedder(input: UpdateEmbedderInput): Embedder!
    deleteEmbedder(input: DeleteEmbedderInput): Void
}
# mutation
extend type Mutation {
    Embedder: EmbedderMutation
}
# query
extend type Query{
    Embedder: EmbedderQuery
}
